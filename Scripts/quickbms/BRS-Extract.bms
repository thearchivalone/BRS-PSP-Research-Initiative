# Copyright 2024 - Brad D
# See LICENSE for copyright information.
# Please include this header and that license for any derivative works.
# NOTE: Only the documentation, tools and anything that's not directly a part of the game's data fall under this copyright. I don't claim any ownership of the game or any of its assets
#
# This tool's source code was great help figuring out this format: https://www.romhacking.net/utilities/815/

# Associate arrays with a hard index here
set FILE_SIZES 0
set FILE_OFFSETS 1
set FILE_NAMES 2

# This is overkill but since some files may have weird structures or offsets, we can use this globally to always start our code in the correct location
set ARBITRARY_NUMBER 10000

# Do some base level stuff based on the file extension
get FILE_TYPE EXTENSION

# Convert FILE_TYPE to lowercase so we only need to check for one variation
string FILE_TYPE l FILE_TYPE

if FILE_TYPE == "vol"
	callfunction extract_vol
elseif FILE_TYPE == "lpk"
	idstring "LPK\x00"
	get NUMBER_OF_FILES long
	goto 0x00
	callfunction extract_lpk 1 NUMBER_OF_FILES
elseif FILE_TYPE == "bin"
	callfunction extract_bin
elseif FILE_TYPE == "gz"
	callfunction extract_gzip
elseif FILE_TYPE == "zzz"
	# This is to cover the chance that a Zlib compressed archive doesn't have the CZAA MAGIC_NUMBER
	goto 0x00
	get BYTE byte
	goto 0x00
	getdstring MAGIC_NUMBER 0x04
	if MAGIC_NUMBER == "CZAA"
		get SIZE long
		callfunction extract_zlib 1 SIZE
	elseif BYTE == 0x78
		get SIZE asize
		callfunction extract_zlib 1 SIZE
	endif
elseif FILE_TYPE == "at3"
	callfunction extract_riff
elseif FILE_TYPE == "efp" | FILE_TYPE == "efc"
	callfunction extract_efp
else
	goto 0x00
	get BYTE byte
	if BYTE == 0x53
			set CURRENT_FILE_START 0x00
			set FILE 0
			callfunction extract_sc 1 FILE CURRENT_FILE_START
	endif
endif

startfunction extract_vol
	idstring "RTDP"
	get ENCRYPTED_DATA_OFFSET long
	get NUMBER_OF_FILES long

	get VOL_SIZE long
	get XORKEY byte # There may only be one single XORKEY afterall

	# Build an array of Filenames from the list
	goto 0x20 # Where the list starts
	savepos CURSOR_POSITION
	for i = 0 < NUMBER_OF_FILES
		goto CURSOR_POSITION
		getdstring FILE 0x20 # These are 32-bytes
		get SIZE long
		get OFFSET long
		savepos CURSOR_POSITION

		putarray FILE_NAMES i FILE
		putarray FILE_OFFSETS i OFFSET
		putarray FILE_SIZES i SIZE
	next i

	# Do some math to get the size of the encrypted section; I've been going about this system all wrong so far
	set ENCRYPTED_DATA_SIZE VOL_SIZE
	math ENCRYPTED_DATA_SIZE - ENCRYPTED_DATA_OFFSET
	get FILE FILENAME

	# Use a temporary file to store the encrypted data section so that it automatically is removed once decryption is finished
	log TEMPORARY_FILE ENCRYPTED_DATA_OFFSET ENCRYPTED_DATA_SIZE

	open "" TEMPORARY_FILE
	filexor XORKEY TEMPORARY_FILE

	# Now we cycle through the FILE_NAMES list and extract each individual file using our arrays from before
	for i = 0 < NUMBER_OF_FILES
		getarray FILE FILE_NAMES i
		getarray OFFSET FILE_OFFSETS i
		getarray SIZE FILE_SIZES i
		goto OFFSET
		if FILE != "NOOP"
			log FILE OFFSET SIZE
		endif
	next i
endfunction

startfunction extract_lpk
	set START_POINT 0x0c
	set START_SHIFT 0x04
	for i = 0 < NUMBER_OF_FILES
		# The start and offset of every file contained within can be found with this; they're all stored in the file
		goto START_POINT
		get CURRENT_FILE_START long

		set OFFSET_SHIFT NUMBER_OF_FILES
		math OFFSET_SHIFT * 0x04
		math OFFSET_SHIFT + START_POINT

		goto OFFSET_SHIFT
		get OFFSET long

		set FILE i
		math START_POINT + START_SHIFT
		callfunction file_builder 1 FILE CURRENT_FILE_START OFFSET
	next i
endfunction

# Build files with correct extensions to make it easier to know what is what; will add as needed
startfunction file_builder
	goto CURRENT_FILE_START
	getdstring MAGIC_NUMBER 0x04
	if MAGIC_NUMBER == "PTMD" | MAGIC_NUMBER == "PTM"
		set EXTENSION ".ptm"
	elseif MAGIC_NUMBER == "SSCR"
		set EXTENSION == ".ss"
	elseif MAGIC_NUMBER == "LPK"
		set EXTENSION ".lpk"
	elseif MAGIC_NUMBER == "INSA"
		set EXTENSION ".anm"
	elseif MAGIC_NUMBER == "INSM"
		# Check which INSM type this is; there's two different versions based on what is found at the address pointed to at 0x34
		goto 0x34
		get EMBEDDED_OFFSET long
		goto EMBEDDED_OFFSET
		getdstring TMP 0x04
		if TMP == "INSA"
			set EXTENSION == ".cam"
		else
			set EXTENSION == ".mdl"
		endif
	elseif MAGIC_NUMBER == "bscr"
		set EXTENSION == ".bms"
	elseif MAGIC_NUMBER == "EFP"
		set EXTENSION == ".efp"
	elseif MAGIC_NUMBER == "BXCB"
		set EXTENSION == ".bin"
	elseif MAGIC_NUMBER == "EDXD"
		set EXTENSION == ".edx"
	elseif MAGIC_NUMBER == "PPHD"
		set EXTENSION == ".phd"
	elseif MAGIC_NUMBER == "RIFF"
		set EXTENSION == ".at3"
	elseif MAGIC_NUMBER == "RTDP"
		set EXTENSION == ".vol"
	elseif MAGIC_NUMBER == "CZAA"
		set EXTENSION == ".zzz"
	elseif MAGIC_NUMBER == "PDK"
		set EXTENSION == ".pdk"
	elseif MAGIC_NUMBER == "XTC"
		set EXTENSION == ".xtc"
	elseif MAGIC_NUMBER == "SDOa"
		set EXTENSION == ".sdoa"
	elseif MAGIC_NUMBER == "XBN"
		set EXTENSION == ".xbn"
	elseif MAGIC_NUMBER == "EFC"
		set EXTENSION == ".efc"
	else
		goto CURRENT_FILE_START
		get MAGIC_NUMBER byte
		if MAGIC_NUMBER == 0x1f # Sort of hack since only a single GZip version exists in the files
			set EXTENSION ".gz"
		# Cover specific SC files that have issues being detected
		elseif MAGIC_NUMBER == 0x53
			get SECOND_NUMBER byte
			getbits HIERARCHY 0x08
			get FOURTH_NUMBER byte
			if SECOND_NUMBER == 0x43 & FOURTH_NUMBER == 0
				set EXTENSION ".sc"
			endif
		else
			set EXTENSION ".pbd"
		endif
	endif
	string FILE + EXTENSION
	log FILE CURRENT_FILE_START OFFSET
endfunction

# These can be a variety of things, so let's check what the MAGIC_NUMBER looks like before we continue
startfunction extract_bin
	goto 0x00
	getdstring MAGIC_NUMBER 0x04
	if MAGIC_NUMBER == "LPK"
		get NUMBER_OF_FILES long
		goto 0x00
		callfunction extract_lpk 1 NUMBER_OF_FILES
	elseif MAGIC_NUMBER == "CZAA"
		get SIZE long
		goto 0x10
		callfunction extract_zlib 1 SIZE
	elseif MAGIC_NUMBER == "RIFF"
		callfunction extract_riff
	elseif MAGIC_NUMBER == "EFC"
		callfunction extract_efp
	else
		goto 0x00
		get MAGIC_NUMBER byte
		if MAGIC_NUMBER == 0x1f
			callfunction extract_gzip
		endif
	endif
endfunction

startfunction extract_gzip
	comtype gzip
	get SIZE asize
	get FILE BASENAME
	# This is a bit of a hack to cover the archive files in multiple locations so they extract with the proper extension
	string TMP = FILE
	string TMP % "_"
	if TMP == "FCHR" | TMP == "FEVT" | TMP == "FEVT2" | TMP == "MAP" | TMP == "BTL" | TMP == "EV" # For FLD
		string FILE + ".SC"
	elseif TMP == "GLR" | TMP == "MINI" | TMP == "IF" | TMP == "MENU" # For Gallery
		string FILE + ".LPK"
	elseif TMP == "BMG" # For Minigames
		string FILE + ".PDK"
	endif

	clog FILE 0 SIZE SIZE
endfunction

# Since these are standard ZLIB compressed archives with a special header, offzip really isn't needed at all
# Note: This doesn't account for the possibility for multiple embedded archives; will only add if needed
startfunction extract_zlib
	# Search for Zlib MAGIC_NUMBER byte by byte in case the archive has a different offset for some reason
	savepos CURSOR_POSITION
	for i = 0 < ARBITRARY_NUMBER
		goto CURSOR_POSITION
		get BYTE byte
		if BYTE != 0x78
			math CURSOR_POSITION + 1
		else
			set OFFSET CURSOR_POSITION
			break
		endif
	next i

	# The encryption key for the data is found in the final byte
	goto SEEK_END
	savepos CRC_END
	math CRC_END - 0x04
	goto CRC_END
	getdstring CRC_KEY 0x04

	# Get the current file size; offset the compressed data so there's no errors thrown or the size of the decompressed data is wrong
	get ZSIZE asize
	math ZSIZE - OFFSET

	# zlib_noerror will hide most possible bugs here but most errors will hopefully just be false due to this being a simple customized version
	comtype zlib_noerror CRC_KEY
	get FILE BASENAME
	clog FILE OFFSET ZSIZE SIZE
endfunction

startfunction extract_efp
	set OFFSET 0x30

	# INSMs always have either an INSA or PTMD embed in them, so skip extracting them by 1 (may need to update if multiple embeds are found)
	set SKIP_PTMD 0
	set SKIP_ANM 0

	# Start reading line by line until we hit one of our MAGIC_NUMBER's
	for i = 0 < ARBITRARY_NUMBER
		goto OFFSET
		getdstring MAGIC_NUMBER 0x04

		set NAME_OFFSET OFFSET
		set EMBEDDED_OFFSET OFFSET
		math NAME_OFFSET - 0x18
		goto NAME_OFFSET
		getdstring NAME 0x1c # so we move past the MAGIC_NUMBER for the rest of the steps

		if MAGIC_NUMBER == "PTMD"
			set SIZE_OFFSET 0x0c
			if SKIP_PTMD == 0
				callfunction extract_ptmd 1 NAME OFFSET EMBEDDED_OFFSET SIZE_OFFSET
			else
				math SKIP_PTMD - 1
			endif
		elseif MAGIC_NUMBER == "INSM"
			math EMBEDDED_OFFSET + 0x34
			goto EMBEDDED_OFFSET
			get EMBEDDED_OFFSET long
			math EMBEDDED_OFFSET + OFFSET
			goto EMBEDDED_OFFSET

			# Now determine which type of model this is by the embedded magic number found at this location
			getdstring ENCRYPTED_MAGIC_NUMBER 0x04
			if ENCRYPTED_MAGIC_NUMBER == "PTMD"
				set SIZE_OFFSET 0x0c
				if SKIP_PTMD == 0
					# These two models are each followed by an extra PTMD file that isn't embedded, named or attached to anything else, so skip it unless it's needed
					if (NAME == "ef_a_b10004_cut_m.mdl" | NAME == "ef_h_b010130_cut_m.mdl" | NAME == "ef_a_s01_ball_m.mdl")
						set SKIP_PTMD 2
					else
						set SKIP_PTMD 1
					endif
				endif
			else
				set SIZE_OFFSET 0x1c
				set SKIP_ANM 1
			endif
			callfunction extract_insm 1 NAME OFFSET EMBEDDED_OFFSET SIZE_OFFSET
		elseif MAGIC_NUMBER == "INSA"
			set SIZE_OFFSET 0x1c
			if SKIP_ANM == 0
				callfunction extract_anm 1 NAME OFFSET EMBEDDED_OFFSET SIZE_OFFSET
			else
				set SKIP_ANM 0
			endif
		else
			# Check if an esb file is embedded with a crazy hack since they only have a name and a size to distinguish their section but are always found at the very end of the EFC file
			get NAME FILENAME
			if NAME == "TEMPORARY_FILE"
				set NAME FILE
			endif
			string NAME - ".efc"
			string NAME + ".esb"
			get SIZE asize
			set START SIZE
			math START - 0x20
			goto START
			savepos CURSOR_POSITION
			for j = START > 0
				goto CURSOR_POSITION
				getdstring READ 0x04
				if READ == ".esb"
					savepos CURSOR_POSITION
					set CURSOR_POSITION TMP
					math TMP + 0x10
					goto TMP
					set CURSOR_POSITION TMP
					get SIZE_OFFSET short
					set OFFSET CURSOR_POSITION
					log NAME OFFSET SIZE_OFFSET
					break
				endif
				set TMP CURSOR_POSITION
				math TMP - 0x04
				goto TMP
				savepos CURSOR_POSITION
			next j - 1
			break
		endif
		set NAME ""
		math OFFSET + 16
	next i
endfunction

startfunction extract_insm
	math SIZE_OFFSET + EMBEDDED_OFFSET
	goto SIZE_OFFSET
	get SIZE long
	math EMBEDDED_OFFSET - OFFSET
	math SIZE + EMBEDDED_OFFSET
	log NAME OFFSET SIZE
	math OFFSET + SIZE
endfunction

startfunction extract_anm
	math SIZE_OFFSET + EMBEDDED_OFFSET
	goto SIZE_OFFSET
	get SIZE long
	log NAME OFFSET SIZE
	math OFFSET + SIZE
endfunction

startfunction extract_ptmd
	math SIZE_OFFSET + EMBEDDED_OFFSET
	goto SIZE_OFFSET
	get SIZE long
	log NAME OFFSET SIZE
	math OFFSET + SIZE
	goto OFFSET
endfunction

startfunction extract_sc
endfunction

startfunction extract_sscr
	# Grab the end of the file by recursively setting DATA_END
	set DATA_END CURRENT_FILE_START
	math DATA_END + 0x18
	goto DATA_END
	get DATA_END long
	goto DATA_END
	savepos OFFSET
	callfunction file_builder 1 FILE CURRENT_FILE_START OFFSET
endfunction

# This builds an array of bit values I can compare to
startfunction power_of_two
	set BIT 0
	for i = 0 < 8
		if i = 0
			set BIT = 1
		else
			math BIT * 2
		endif
		putarray POW2 i BIT
	next i
endfunction

startfunction extract_riff
	print "Use VGMStream or any other audio conversion tool that supports the Atrac3 codec"
endfunction

# Used this for guidance: http://www.topherlee.com/software/pcm-tut-wavformat.html
# This is an experimental conversion implementation (cause why not). It converts the original at3's from the game into the proper format but doesn't play properly; I think it may be due to the audio using a proprietary Sony codec that only works on their hardware.

startfunction extract_riff_experimental
	goto 0x00
	savepos CURSOR_POSITION

	# These values don't exist on the rom, so we'll need to stub them in with defaults so we can build a real audio file from everything here
	set FORMAT_LENGTH long 16
	set AUDIO_CHANNELS short 2
	set SAMPLE_RATE long 176400
	set CHANNEL_BPS_RATE short 4

	# Manually set certain memory locations for the format to convert correctly
	set FL_POSITION 0x10
	set AT_POSITION 0x14
	set CH_POSITION 0x16
	set SR_POSITION 0x1c
	set CBR_POSITION 0x20
	set BPS_POSITION 0x22
	set DS_POSITION 0x24

	getdstring MAGIC_NUMBER 0x04 # "RIFF"
	get SIZE long
	math SIZE + 8 # To get the same as the actual file size
	getdstring AUDIO_FORMAT 0x04
	getdstring FORMAT_CHUNK 0x03
	get NULL byte
	savepos CURSOR_POSITION
	savepos FL_POSITION

	# Use this to eventually move to the correct data location
	get FACT_OFFSET long
	savepos CURSOR_POSITION

	get UNKNOWN short

	get AUDIO_TYPE short
	get AUDIO_SAMPLE_RATE long
	get UNKNOWN byte
	get AUDIO_BITS_PER_SAMPLE byte
	get UNKNOWN short

	# Move to fact header location
	set TMP_POSITION CURSOR_POSITION
	math TMP_POSITION + FACT_OFFSET
	goto TMP_POSITION

	savepos CURSOR_POSITION
	savepos FH_POSITION
	getdstring FACT_HEADER 0x04
	get DATA_OFFSET long

	set TMP_POSITION CURSOR_POSITION
	math TMP_POSITION + DATA_OFFSET
	goto TMP_POSITION
	savepos CURSOR_POSITION

	# Move to data header location
	get DATA_OFFSET long
	math DATA_OFFSET / 0xff
	set TMP_POSITION CURSOR_POSITION
	math TMP_POSITION + DATA_OFFSET
	goto TMP_POSITION
	savepos CURSOR_POSITION
	savepos DH_POSITION

	getdstring DATA_HEADER 0x04
	get DATA_SIZE long
	savepos CURSOR_POSITION
	goto SEEK_END
	savepos DE_POSITION

	# Store the DATA section into an array
	goto DH_POSITION
	set DS_OFFSET DE_POSITION
	math DS_OFFSET - DH_POSITION
	savepos CURSOR_POSITION
	for i = 0 < DS_OFFSET
		goto CURSOR_POSITION
		get BYTE byte
		putarray DATA_ARRAY i BYTE
		savepos CURSOR_POSITION
	next i

	# Make the MEMORY_FILE Whole
	log MEMORY_FILE 0 SIZE

	# Start making edits to the MEMORY_FILE so that it has the correct information we need
	putvarchr MEMORY_FILE AT_POSITION AUDIO_TYPE short
	putvarchr MEMORY_FILE CH_POSITION AUDIO_CHANNELS short
	putvarchr MEMORY_FILE FL_POSITION FORMAT_LENGTH long
	putvarchr MEMORY_FILE AC_POSITION 25 short
	putvarchr MEMORY_FILE CBR_POSITION CHANNEL_BPS_RATE short
	putvarchr MEMORY_FILE BPS_POSITION AUDIO_BITS_PER_SAMPLE short
	putvarchr MEMORY_FILE SR_POSITION SAMPLE_RATE long

	# Fill the whole fact section with the DATA section
	goto SEEK_END
	savepos FD_OFFSET
	math FD_OFFSET - DS_POSITION
	goto FH_POSITION
	savepos CURSOR_POSITION

	# Null this entire section before filling with data
	for i = 0 < FD_OFFSET
		goto CURSOR_POSITION
		putvarchr MEMORY_FILE CURSOR_POSITION 0 byte
		math CURSOR_POSITION + 1
	next i

	goto DS_POSITION
	savepos CURSOR_POSITION
	for i = 0 < DS_OFFSET
		goto CURSOR_POSITION
		getarray BYTE DATA_ARRAY i
		putvarchr MEMORY_FILE CURSOR_POSITION BYTE byte
		math CURSOR_POSITION + 1
	next i

	# Winging this hard. We're writing raw data to file adding the pieces that were missing and moving what's available to the right locations for the format to work on Windows or any other platform
	get FILE BASENAME
	set EXTENSION ".wav"
	string FILE + EXTENSION
	log FILE 0 4
	math SIZE - 4
	append
	log FILE 4 SIZE MEMORY_FILE
endfunction